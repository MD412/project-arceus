-- Rename binder uploads table and update references

-- 1. Rename main table
alter table if exists binder_page_uploads
  rename to scan_uploads;

-- 2. Rename foreign-key column and constraint on job_queue (keep old column name if you prefer gradual migration)
alter table if exists job_queue
  rename column binder_page_upload_id to scan_upload_id;

-- Constraint names are autogenerated; drop the old FK and create a new one pointing to scan_uploads
alter table if exists job_queue
  drop constraint if exists job_queue_binder_page_uploads_id_fkey;

alter table if exists job_queue
  add constraint job_queue_scan_uploads_id_fkey foreign key (scan_upload_id) references scan_uploads(id) on delete cascade;

-- 3. Rename RLS policies on the renamed table (if policy names exist)
-- Note: Supabase policy names are case-sensitive strings; adjust to your exact names.
alter policy if exists "binder_page_uploads_select" on scan_uploads rename to "scan_uploads_select";
alter policy if exists "binder_page_uploads_insert" on scan_uploads rename to "scan_uploads_insert";
alter policy if exists "binder_page_uploads_update" on scan_uploads rename to "scan_uploads_update";
alter policy if exists "binder_page_uploads_delete" on scan_uploads rename to "scan_uploads_delete";

-- 4. Replace stored procedure create_binder_and_enqueue_job with new name
--    This uses plpgsql syntax; ensure language settings match your database.

-- Drop old function if it exists
DROP FUNCTION IF EXISTS create_binder_and_enqueue_job;

-- Create new function
CREATE OR REPLACE FUNCTION create_scan_and_enqueue_job(
  p_user_id uuid,
  p_storage_path text,
  p_content_hash text,
  p_scan_title text
) RETURNS TABLE(job_id uuid) LANGUAGE plpgsql SECURITY DEFINER AS $$
DECLARE
  v_upload_id uuid;
BEGIN
  -- Insert into scan_uploads
  insert into scan_uploads(user_id, storage_path, content_hash, scan_title)
    values (p_user_id, p_storage_path, p_content_hash, p_scan_title)
    returning id into v_upload_id;

  -- Enqueue job
  insert into job_queue(scan_upload_id, status, job_type)
    values (v_upload_id, 'pending', 'process_scan_page')
    returning id into job_id;

  RETURN;
END;
$$;

-- Grant execute to anon & service-role as needed
grant execute on function create_scan_and_enqueue_job to anon, authenticated, service_role; 